<?php
  use Drupal\Core\Entity\EntityInterface;
  use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * @file
 * Contains memory_game.module
 */

/**
 * Implements hook_preprocess_node().
 */
function memory_game_preprocess_node(&$variables) {
  // Use the platform env variable to check if we're developing locally.
  // And attach the bnn memory game library.
  $node = $variables['node']->id();
  if($node == '33') {
    $modulePath = \Drupal::service('module_handler')->getModule('memory_game')->getPath();
    if (file_exists($modulePath . '/js/dist_dev')) {
      $variables['#attached']['library'][] = 'memory_game/memory_app_dev';
    } else {
      $variables['#attached']['library'][] = 'memory_game/memory_app';
    }
  }
}

/**
 * Implements hook_token_info().
 */
function memory_game_token_info() {
  $info['types']['memory_game'] = [
    'name' => t('Juego de memoria'),
    'description' => t('Tokens personalizados para proveer información sobre el juego de momoría a páginas de agradecimiento.'),
  ];

  $info['tokens']['memory_game']['promo'] = [
    'name' => t("Promoción"),
    'description' => t("Token de promoción"),
  ];

  $info['tokens']['memory_game']['game_type'] = [
    'name' => 'Tipo de juego',
    'description' => t('Este token retorna el tipo de juego.'),
  ];

  $info['tokens']['memory_game']['pet'] = [
    'name' => 'Mascota',
    'description' => t('Este token retorna la mascota con la que se participó.'),
  ];

  $info['tokens']['memory_game']['code'] = [
    'name' => 'Código',
    'description' => t('Este token retorna el código con el que se participó.'),
  ];

  $info['tokens']['memory_game']['game_time'] = [
    'name' => 'Tiempo de juego',
    'description' => t('Este token retorna el tiempo en el que se completó el juego.'),
  ];

  $info['tokens']['memory_game']['game_completed'] = [
    'name' => 'Completado',
    'description' => t('Este token retorna información sobre si se completó o no el juego.'),
  ];

  $info['tokens']['memory_game']['game_message'] = [
    'name' => 'Mensaje de juego',
    'description' => t('Este token retorna un mensaje del juego.'),
  ];

  $info['tokens']['memory_game']['user_status'] = [
    'name' => 'Estatus de usuario',
    'description' => t('Este token retorna el estatus del jugador como "no ganador" o "posible ganador" después de jugar.'),
  ];


  return $info;
}
/**
 * Implements hook_tokens().
 */
function memory_game_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'memory_game') {
    $node = $data['node'];
    if ($node->bundle() == 'thank_you_page') {
      /** @var \Drupal\memory_game\GeneratePositions $service */
      $service = \Drupal::service('memory_game.generate_positions');
      $webformSubmission = _get_memory_game_submission_values($service->getGameSettings()['webform_submission_id']);
      $promotionNode = _get_memory_game_node_values($webformSubmission->get('entity_id')->value);
      $petNode = _get_memory_game_node_values($webformSubmission->getElementData('elige_tus_mascotas'));
      $service->destroySettings();

      foreach ($tokens as $name => $original) {
        // Find the desired token by name
        switch ($name) {
          case 'promo':
            $replacements[$original] = $promotionNode->getTitle();
            break;

          case 'game_type':
            $gameType = '';
            if ($webformSubmission->getElementData('game_type') == 'memory') {
              $gameType = 'memoria';
            }
            $replacements[$original] = $gameType;
            break;

          case 'pet':
            $replacements[$original] = $petNode->getTitle();
            break;

          case 'code':
            $replacements[$original] = $webformSubmission->getElementData('codigo');
            break;

          case 'game_time':
            $replacements[$original] = $webformSubmission->getElementData('game_time');
            break;

          case 'game_completed':
            $replacements[$original] = $webformSubmission->getElementData('game_completed');
            break;

          case 'game_message':
            $replacements[$original] = $webformSubmission->getElementData('game_message');
            break;

          case 'user_status':
            if ($webformSubmission->getElementData('game_status') == 'possible_winner') {
              $replacements[$original] = 'posible ganador';
            }
            elseif ($webformSubmission->getElementData('game_status') == 'no_winner') {
              $replacements[$original] = 'no ganador';
            }
            else {
              $replacements[$original] = 'ganador';
            }
            break;

          default:
            break;
        }
      }
    }
  }
  return $replacements;
}

/**
 * Get promotion webform submission.
 */
function _get_memory_game_submission_values(int $sid) {
  $webformSubmissionEntity = \Drupal::entityTypeManager()
    ->getStorage('webform_submission')
    ->load($sid);

  return $webformSubmissionEntity;
}

/**
 * Get promotion node values.
 */
function _get_memory_game_node_values(int $nid) {
  $promotionNode = \Drupal\node\Entity\Node::load($nid);

  return $promotionNode;
}
