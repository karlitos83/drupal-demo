<?php

/**
 * @file
 * Contains media_entity_remote_image.module.
 */

use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\media\MediaInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_entity_remote_image_form_media_remote_image_edit_form_alter(&$form, FormStateInterface $form_state) {
  $form['actions']['submit']['#submit'][] = '_force_update_media_name';
}

/**
 * Shim to stop title from being overwritten by tokenized version.
 *
 * When updating both the url and the title of a remote image,
 * for some reason the title is overridden and replaced
 * with a tokenized version of the entity route.
 *
 * The root cause of this issue is currently unknown.
 *
 * Since the form_submit handler runs after hook_entity_presave,
 * we simply grab the $name from the submitted form and resave
 * the entity.
 *
 * This still ends up with the stale tile being displayed in the
 * "entity successfully saved" message, but that is a lower priority.
 *
 * @todo: Fix the noted message and/or root cause
 */
function _force_update_media_name($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $name = $values['name'][0]['value'];
  $path = $values['path'][0]['source'];

  $path = explode('/', $path);
  $media_id = $path[2];

  $media_entity = \Drupal::entityTypeManager()
    ->getStorage('media')
    ->load($media_id);

  $media_entity->setName($name)->save();
}

/**
 * Implements hook_ENTITY_ID_presave().
 */
function media_entity_remote_image_media_presave(MediaInterface $media) {
  if (!$media->getEntityType()->hasKey('bundle')) {
    return;
  }

  $bundle_key = $media->getEntityType()->getKey('bundle');
  $bundle = $media->get($bundle_key)->entity;
  if (!$bundle) {
    return;
  }

  /** @var \Drupal\media\MediaSourceBase $source */
  $source = $bundle->getSource();
  if ($source->getPluginId() !== 'remote_image') {
    return;
  }

  $settings = \Drupal::config('media_entity_remote_image.settings');
  if (!$settings->get('generate_thumbnails')) {
    return;
  }

  $source_field = $source->getConfiguration()['source_field'];
  $remote_url = $media->get($source_field)->uri;

  // If the field is unchanged and a thumbnail already exists.
  // Allows generation of thumbnails post-update even if the
  // url is unchanged.
  if ($media->original
    && $media->original->get($source_field)->uri == $remote_url
    && !$media->get('thumbnail')->isEmpty()) {
    return;
  }

  try {
    $img_info = pathinfo($remote_url);
    $time = time();
    $filename = "{$img_info['filename']}-$time.{$img_info['extension']}";
    $remote_image = file_get_contents($remote_url);

    if (!$remote_image) {
      \Drupal::messenger()
        ->addError("Could not generate the thumbnail because the remote image $remote_url does not exist or is inaccessible.");
      return;
    }
    $file = \Drupal::service('file.repository')->writeData($remote_image, "public://$filename",
      FileSystemInterface::EXISTS_ERROR);
    $media->set('thumbnail', $file);
  }
  catch (\Throwable $e) {
    \Drupal::logger('media_entity_remote_image')->error($e->getMessage() . "<pre>{$e->getTraceAsString()}</pre>");
    \Drupal::messenger()->addError('Could not generate thumbnail. See the logs for more information.');
  }
}

